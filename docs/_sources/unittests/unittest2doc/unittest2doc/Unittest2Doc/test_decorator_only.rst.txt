.. _unittests/unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only:

unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only
========================================================================================

references: :class:`unittest2doc.unittest2doc.Unittest2Doc`


docstring of class
------------------

in this class, we test the decorator ``@Unittest2Doc.only``



.. _unittests/unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only.setUp:

setUp
-----

.. collapse:: INPUT
  :open:

  .. code-block:: python

    def setUp(s):
      print("# this setup function is always called at beginning")
    


.. collapse:: OUTPUT
  :open:

  .. code-block:: 

    # this setup function is always called at beginning
  


.. _unittests/unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only.only_1:

only_1
------

when you use ``Unittest2Doc.generate_docs()``, this test will be executed

Note that if you use ``python -m unittest ...`` framework, all tests will be executed

Thus the `only` decorator should only be used during your development and testing,
e.g., you just want to test one function and want to skip others for speed



.. collapse:: INPUT
  :open:

  .. code-block:: python

    @unittest2doc.only
    def test_only_1(s):
      """ when you use ``Unittest2Doc.generate_docs()``, this test will be executed
    
          Note that if you use ``python -m unittest ...`` framework, all tests will be executed
    
          Thus the `only` decorator should only be used during your development and testing,
          e.g., you just want to test one function and want to skip others for speed
    
      """
      pass
    


.. _unittests/unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only.only_2:

only_2
------

when you use ``Unittest2Doc.generate_docs()``, this test will be executed


.. collapse:: INPUT
  :open:

  .. code-block:: python

    @unittest2doc.only
    def test_only_2(s):
      """ when you use ``Unittest2Doc.generate_docs()``, this test will be executed
      """
      pass
    


.. _unittests/unittest2doc.unittest2doc.Unittest2Doc.test_decorator_only.tearDown:

tearDown
--------

.. collapse:: INPUT
  :open:

  .. code-block:: python

    def tearDown(s):
      print("# this tearDown function is always called at end")
    


.. collapse:: OUTPUT
  :open:

  .. code-block:: 

    # this tearDown function is always called at end
  

